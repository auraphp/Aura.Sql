<?php
namespace Aura\Sql\Connection;

/**
 * Test class for Sqlite.
 * Generated by PHPUnit on 2011-06-21 at 16:49:57.
 */
class SqliteTest extends AbstractConnectionTest
{
    protected $extension = 'pdo_sqlite';
    
    protected $connection_type = 'sqlite';
    
    protected $expect_fetch_table_list = ['aura_test_table', 'sqlite_sequence'];
    
    protected $expect_fetch_table_list_schema = ['aura_test_table', 'sqlite_sequence'];
    
    protected $expect_fetch_table_cols = [
        'id' => [
            'name' => 'id',
            'type' => 'integer',
            'size' => null,
            'scale' => null,
            'default' => null,
            'notnull' => false,
            'primary' => true,
            'autoinc' => true,
        ],
        'name' => [
            'name' => 'name',
            'type' => 'varchar',
            'size' => 50,
            'scale' => null,
            'default' => null,
            'notnull' => true,
            'primary' => false,
            'autoinc' => false,
        ],
        'test_size_scale' => [
            'name' => 'test_size_scale',
            'type' => 'numeric',
            'size' => 7,
            'scale' => 3,
            'default' => null,
            'notnull' => false,
            'primary' => false,
            'autoinc' => false,
        ],
        'test_default_null' => [
            'name' => 'test_default_null',
            'type' => 'char',
            'size' => 3,
            'scale' => null,
            'default' => null,
            'notnull' => false,
            'primary' => false,
            'autoinc' => false,
        ],
        'test_default_string' => [
            'name' => 'test_default_string',
            'type' => 'varchar',
            'size' => 7,
            'scale' => null,
            'default' => 'string',
            'notnull' => false,
            'primary' => false,
            'autoinc' => false,
        ],
        'test_default_number' => [
            'name' => 'test_default_number',
            'type' => 'numeric',
            'size' => 5,
            'scale' => null,
            'default' => '12345',
            'notnull' => false,
            'primary' => false,
            'autoinc' => false,
        ],
        'test_default_ignore' => [
            'name' => 'test_default_ignore',
            'type' => 'timestamp',
            'size' => null,
            'scale' => null,
            'default' => null,
            'notnull' => false,
            'primary' => false,
            'autoinc' => false,
        ],
    ];
    
    protected $expect_quote_scalar = "'\"foo\" bar ''baz'''";
    
    protected $expect_quote_array = "'\"foo\"', 'bar', '''baz'''";
    
    protected $expect_quote_into = "foo = '''bar'''";
    
    protected $expect_quote_into_many = "foo = '''bar''' AND zim = '''baz'''";
    
    protected $expect_quote_multi = "id = 1 AND foo = 'bar' AND zim IN('dib', 'gir', 'baz')";
    
    protected $expect_quote_name_table_as_alias = '"table" AS "alias"';
    
    protected $expect_quote_name_table_col_as_alias = '"table"."col" AS "alias"';
    
    protected $expect_quote_name_table_alias = '"table" "alias"';
    
    protected $expect_quote_name_table_col_alias = '"table"."col" "alias"';
    
    protected $expect_quote_name_plain = '"table"';
    
    protected $expect_quote_names_in = "*, *.*, \"foo\".\"bar\", CONCAT('foo.bar', \"baz.dib\") AS \"zim\"";
    
    public function testNewSqliteSelect()
    {
        $query = $this->connection->newSqliteSelect();
        
        $this->assertEquals('Aura\Sql\Query\Sqlite\Select', get_class($query));
    }
    
    public function testNewSqliteDelete()
    {
        $query = $this->connection->newSqliteDelete();
        
        $this->assertEquals('Aura\Sql\Query\Sqlite\Delete', get_class($query));
    }
    
    public function testNewSqliteUpdate()
    {
        $query = $this->connection->newSqliteUpdate();
        
        $this->assertEquals('Aura\Sql\Query\Sqlite\Update', get_class($query));
    }
    
    public function testNewSqliteInsert()
    {
        $query = $this->connection->newSqliteInsert();
        
        $this->assertEquals('Aura\Sql\Query\Sqlite\Insert', get_class($query));
    }
}
